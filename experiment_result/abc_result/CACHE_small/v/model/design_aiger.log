
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.16+63 (git sha1 11e75bc27, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design.il

2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3. Executing ASYNC2SYNC pass.

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Finding unused cells or wires in module \sharerinvalidatescache_1..
Finding unused cells or wires in module \sharerinvalidatescache..
Finding unused cells or wires in module \homesendsreplytoclient_shared..
Finding unused cells or wires in module \homesendsreplytoclient_exclusive..
Finding unused cells or wires in module \homesendsinvalidatemessage_1..
Finding unused cells or wires in module \homesendsinvalidatemessage..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement_1..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement..
Finding unused cells or wires in module \homepicksnewrequest_1..
Finding unused cells or wires in module \homepicksnewrequest..
Finding unused cells or wires in module \clientrequestssharedaccess_1..
Finding unused cells or wires in module \clientrequestssharedaccess..
Finding unused cells or wires in module \clientrequestsexclusiveaccess_1..
Finding unused cells or wires in module \clientrequestsexclusiveaccess..
Finding unused cells or wires in module \clientreceivessharedgrant_1..
Finding unused cells or wires in module \clientreceivessharedgrant..
Finding unused cells or wires in module \clientreceivedexclusivegrant_1..
Finding unused cells or wires in module \clientreceivedexclusivegrant..
Finding unused cells or wires in module \Init..

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module clientreceivedexclusivegrant.
Optimizing module clientreceivedexclusivegrant_1.
Optimizing module clientreceivessharedgrant.
Optimizing module clientreceivessharedgrant_1.
Optimizing module clientrequestsexclusiveaccess.
Optimizing module clientrequestsexclusiveaccess_1.
Optimizing module clientrequestssharedaccess.
Optimizing module clientrequestssharedaccess_1.
Optimizing module homepicksnewrequest.
Optimizing module homepicksnewrequest_1.
Optimizing module homereceivesinvalidateacknowledgement.
Optimizing module homereceivesinvalidateacknowledgement_1.
Optimizing module homesendsinvalidatemessage.
Optimizing module homesendsinvalidatemessage_1.
Optimizing module homesendsreplytoclient_exclusive.
Optimizing module homesendsreplytoclient_shared.
Optimizing module sharerinvalidatescache.
Optimizing module sharerinvalidatescache_1.
Optimizing module system.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\clientreceivedexclusivegrant'.
Finding identical cells in module `\clientreceivedexclusivegrant_1'.
Finding identical cells in module `\clientreceivessharedgrant'.
Finding identical cells in module `\clientreceivessharedgrant_1'.
Finding identical cells in module `\clientrequestsexclusiveaccess'.
Finding identical cells in module `\clientrequestsexclusiveaccess_1'.
Finding identical cells in module `\clientrequestssharedaccess'.
Finding identical cells in module `\clientrequestssharedaccess_1'.
Finding identical cells in module `\homepicksnewrequest'.
Finding identical cells in module `\homepicksnewrequest_1'.
Finding identical cells in module `\homereceivesinvalidateacknowledgement'.
Finding identical cells in module `\homereceivesinvalidateacknowledgement_1'.
Finding identical cells in module `\homesendsinvalidatemessage'.
Finding identical cells in module `\homesendsinvalidatemessage_1'.
Finding identical cells in module `\homesendsreplytoclient_exclusive'.
Finding identical cells in module `\homesendsreplytoclient_shared'.
Finding identical cells in module `\sharerinvalidatescache'.
Finding identical cells in module `\sharerinvalidatescache_1'.
Finding identical cells in module `\system'.
Removed a total of 0 cells.

6.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1031 ($dff) from module system (D = $0\cache_reg_2[1:0], Q = \cache_reg_2).
Adding EN signal on $procdff$1030 ($dff) from module system (D = $0\cache_reg_1[1:0], Q = \cache_reg_1).
Adding EN signal on $procdff$1029 ($dff) from module system (D = $0\cache_reg_0[1:0], Q = \cache_reg_0).
Adding EN signal on $procdff$1028 ($dff) from module system (D = $0\home_current_client_reg[1:0], Q = \home_current_client_reg).
Adding EN signal on $procdff$1027 ($dff) from module system (D = $0\home_current_command_reg[2:0], Q = \home_current_command_reg).
Adding EN signal on $procdff$1026 ($dff) from module system (D = $0\home_exclusive_granted_reg[0:0], Q = \home_exclusive_granted_reg).
Adding EN signal on $procdff$1025 ($dff) from module system (D = $0\home_invalidate_list_reg_2[0:0], Q = \home_invalidate_list_reg_2).
Adding EN signal on $procdff$1024 ($dff) from module system (D = $0\home_invalidate_list_reg_1[0:0], Q = \home_invalidate_list_reg_1).
Adding EN signal on $procdff$1023 ($dff) from module system (D = $0\home_invalidate_list_reg_0[0:0], Q = \home_invalidate_list_reg_0).
Adding EN signal on $procdff$1022 ($dff) from module system (D = $0\home_sharer_list_reg_2[0:0], Q = \home_sharer_list_reg_2).
Adding EN signal on $procdff$1021 ($dff) from module system (D = $0\home_sharer_list_reg_1[0:0], Q = \home_sharer_list_reg_1).
Adding EN signal on $procdff$1020 ($dff) from module system (D = $0\home_sharer_list_reg_0[0:0], Q = \home_sharer_list_reg_0).
Adding EN signal on $procdff$1019 ($dff) from module system (D = $0\channel3_reg_2[2:0], Q = \channel3_reg_2).
Adding EN signal on $procdff$1018 ($dff) from module system (D = $0\channel3_reg_1[2:0], Q = \channel3_reg_1).
Adding EN signal on $procdff$1017 ($dff) from module system (D = $0\channel3_reg_0[2:0], Q = \channel3_reg_0).
Adding EN signal on $procdff$1016 ($dff) from module system (D = $0\channel2_4_reg_2[2:0], Q = \channel2_4_reg_2).
Adding EN signal on $procdff$1015 ($dff) from module system (D = $0\channel2_4_reg_1[2:0], Q = \channel2_4_reg_1).
Adding EN signal on $procdff$1014 ($dff) from module system (D = $0\channel2_4_reg_0[2:0], Q = \channel2_4_reg_0).
Adding EN signal on $procdff$1013 ($dff) from module system (D = $0\channel1_reg_2[2:0], Q = \channel1_reg_2).
Adding EN signal on $procdff$1012 ($dff) from module system (D = $0\channel1_reg_1[2:0], Q = \channel1_reg_1).
Adding EN signal on $procdff$1011 ($dff) from module system (D = $0\channel1_reg_0[2:0], Q = \channel1_reg_0).

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \clientreceivedexclusivegrant..
Finding unused cells or wires in module \clientreceivedexclusivegrant_1..
Finding unused cells or wires in module \clientreceivessharedgrant..
Finding unused cells or wires in module \clientreceivessharedgrant_1..
Finding unused cells or wires in module \clientrequestsexclusiveaccess..
Finding unused cells or wires in module \clientrequestsexclusiveaccess_1..
Finding unused cells or wires in module \clientrequestssharedaccess..
Finding unused cells or wires in module \clientrequestssharedaccess_1..
Finding unused cells or wires in module \homepicksnewrequest..
Finding unused cells or wires in module \homepicksnewrequest_1..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement_1..
Finding unused cells or wires in module \homesendsinvalidatemessage..
Finding unused cells or wires in module \homesendsinvalidatemessage_1..
Finding unused cells or wires in module \homesendsreplytoclient_exclusive..
Finding unused cells or wires in module \homesendsreplytoclient_shared..
Finding unused cells or wires in module \sharerinvalidatescache..
Finding unused cells or wires in module \sharerinvalidatescache_1..
Finding unused cells or wires in module \system..

6.5. Rerunning OPT passes. (Removed registers in this run.)

6.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module clientreceivedexclusivegrant.
Optimizing module clientreceivedexclusivegrant_1.
Optimizing module clientreceivessharedgrant.
Optimizing module clientreceivessharedgrant_1.
Optimizing module clientrequestsexclusiveaccess.
Optimizing module clientrequestsexclusiveaccess_1.
Optimizing module clientrequestssharedaccess.
Optimizing module clientrequestssharedaccess_1.
Optimizing module homepicksnewrequest.
Optimizing module homepicksnewrequest_1.
Optimizing module homereceivesinvalidateacknowledgement.
Optimizing module homereceivesinvalidateacknowledgement_1.
Optimizing module homesendsinvalidatemessage.
Optimizing module homesendsinvalidatemessage_1.
Optimizing module homesendsreplytoclient_exclusive.
Optimizing module homesendsreplytoclient_shared.
Optimizing module sharerinvalidatescache.
Optimizing module sharerinvalidatescache_1.
Optimizing module system.
<suppressed ~21 debug messages>

6.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\clientreceivedexclusivegrant'.
Finding identical cells in module `\clientreceivedexclusivegrant_1'.
Finding identical cells in module `\clientreceivessharedgrant'.
Finding identical cells in module `\clientreceivessharedgrant_1'.
Finding identical cells in module `\clientrequestsexclusiveaccess'.
Finding identical cells in module `\clientrequestsexclusiveaccess_1'.
Finding identical cells in module `\clientrequestssharedaccess'.
Finding identical cells in module `\clientrequestssharedaccess_1'.
Finding identical cells in module `\homepicksnewrequest'.
Finding identical cells in module `\homepicksnewrequest_1'.
Finding identical cells in module `\homereceivesinvalidateacknowledgement'.
Finding identical cells in module `\homereceivesinvalidateacknowledgement_1'.
Finding identical cells in module `\homesendsinvalidatemessage'.
Finding identical cells in module `\homesendsinvalidatemessage_1'.
Finding identical cells in module `\homesendsreplytoclient_exclusive'.
Finding identical cells in module `\homesendsreplytoclient_shared'.
Finding identical cells in module `\sharerinvalidatescache'.
Finding identical cells in module `\sharerinvalidatescache_1'.
Finding identical cells in module `\system'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

6.8. Executing OPT_DFF pass (perform DFF optimizations).

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \clientreceivedexclusivegrant..
Finding unused cells or wires in module \clientreceivedexclusivegrant_1..
Finding unused cells or wires in module \clientreceivessharedgrant..
Finding unused cells or wires in module \clientreceivessharedgrant_1..
Finding unused cells or wires in module \clientrequestsexclusiveaccess..
Finding unused cells or wires in module \clientrequestsexclusiveaccess_1..
Finding unused cells or wires in module \clientrequestssharedaccess..
Finding unused cells or wires in module \clientrequestssharedaccess_1..
Finding unused cells or wires in module \homepicksnewrequest..
Finding unused cells or wires in module \homepicksnewrequest_1..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement..
Finding unused cells or wires in module \homereceivesinvalidateacknowledgement_1..
Finding unused cells or wires in module \homesendsinvalidatemessage..
Finding unused cells or wires in module \homesendsinvalidatemessage_1..
Finding unused cells or wires in module \homesendsreplytoclient_exclusive..
Finding unused cells or wires in module \homesendsreplytoclient_shared..
Finding unused cells or wires in module \sharerinvalidatescache..
Finding unused cells or wires in module \sharerinvalidatescache_1..
Finding unused cells or wires in module \system..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

6.10. Finished fast OPT passes.

7. Executing CHECK pass (checking for obvious problems).
Checking module Init...
Checking module clientreceivedexclusivegrant...
Checking module clientreceivedexclusivegrant_1...
Checking module clientreceivessharedgrant...
Checking module clientreceivessharedgrant_1...
Checking module clientrequestsexclusiveaccess...
Checking module clientrequestsexclusiveaccess_1...
Checking module clientrequestssharedaccess...
Checking module clientrequestssharedaccess_1...
Checking module homepicksnewrequest...
Checking module homepicksnewrequest_1...
Checking module homereceivesinvalidateacknowledgement...
Checking module homereceivesinvalidateacknowledgement_1...
Checking module homesendsinvalidatemessage...
Checking module homesendsinvalidatemessage_1...
Checking module homesendsreplytoclient_exclusive...
Checking module homesendsreplytoclient_shared...
Checking module sharerinvalidatescache...
Checking module sharerinvalidatescache_1...
Checking module system...
Found and reported 0 problems.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \system
Used module:     \Init
Used module:     \clientrequestssharedaccess
Used module:     \homereceivesinvalidateacknowledgement_1
Used module:     \sharerinvalidatescache
Used module:     \sharerinvalidatescache_1
Used module:     \clientreceivessharedgrant
Used module:     \clientreceivessharedgrant_1
Used module:     \clientreceivedexclusivegrant
Used module:     \clientreceivedexclusivegrant_1
Used module:     \homesendsreplytoclient_shared
Used module:     \homesendsreplytoclient_exclusive
Used module:     \clientrequestssharedaccess_1
Used module:     \clientrequestsexclusiveaccess
Used module:     \clientrequestsexclusiveaccess_1
Used module:     \homepicksnewrequest
Used module:     \homepicksnewrequest_1
Used module:     \homesendsinvalidatemessage
Used module:     \homesendsinvalidatemessage_1
Used module:     \homereceivesinvalidateacknowledgement

8.2. Analyzing design hierarchy..
Top module:  \system
Used module:     \Init
Used module:     \clientrequestssharedaccess
Used module:     \homereceivesinvalidateacknowledgement_1
Used module:     \sharerinvalidatescache
Used module:     \sharerinvalidatescache_1
Used module:     \clientreceivessharedgrant
Used module:     \clientreceivessharedgrant_1
Used module:     \clientreceivedexclusivegrant
Used module:     \clientreceivedexclusivegrant_1
Used module:     \homesendsreplytoclient_shared
Used module:     \homesendsreplytoclient_exclusive
Used module:     \clientrequestssharedaccess_1
Used module:     \clientrequestsexclusiveaccess
Used module:     \clientrequestsexclusiveaccess_1
Used module:     \homepicksnewrequest
Used module:     \homepicksnewrequest_1
Used module:     \homesendsinvalidatemessage
Used module:     \homesendsinvalidatemessage_1
Used module:     \homereceivesinvalidateacknowledgement
Removed 0 unused modules.
Module system directly or indirectly contains formal properties -> setting "keep" attribute.

9. Executing FLATTEN pass (flatten design).
Deleting now unused module Init.
Deleting now unused module clientreceivedexclusivegrant.
Deleting now unused module clientreceivedexclusivegrant_1.
Deleting now unused module clientreceivessharedgrant.
Deleting now unused module clientreceivessharedgrant_1.
Deleting now unused module clientrequestsexclusiveaccess.
Deleting now unused module clientrequestsexclusiveaccess_1.
Deleting now unused module clientrequestssharedaccess.
Deleting now unused module clientrequestssharedaccess_1.
Deleting now unused module homepicksnewrequest.
Deleting now unused module homepicksnewrequest_1.
Deleting now unused module homereceivesinvalidateacknowledgement.
Deleting now unused module homereceivesinvalidateacknowledgement_1.
Deleting now unused module homesendsinvalidatemessage.
Deleting now unused module homesendsinvalidatemessage_1.
Deleting now unused module homesendsreplytoclient_exclusive.
Deleting now unused module homesendsreplytoclient_shared.
Deleting now unused module sharerinvalidatescache.
Deleting now unused module sharerinvalidatescache_1.
<suppressed ~19 debug messages>

10. Executing SETUNDEF pass (replace undef values with defined constants).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.
<suppressed ~1 debug messages>

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
<suppressed ~65 debug messages>
Removed a total of 22 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:62$732.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:61$731.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:60$730.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:59$729.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:57$728.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:56$727.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:54$726.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:53$725.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:51$724.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:50$723.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:48$722.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:47$721.
    dead port 2/2 on $mux $flatten\rules_10.$ternary$protocol.sv:763$594.
    dead port 2/2 on $mux $flatten\rules_10.$ternary$protocol.sv:760$593.
    dead port 2/2 on $mux $flatten\rules_11.$ternary$protocol.sv:829$579.
    dead port 2/2 on $mux $flatten\rules_11.$ternary$protocol.sv:826$578.
    dead port 2/2 on $mux $flatten\rules_12.$ternary$protocol.sv:900$564.
    dead port 2/2 on $mux $flatten\rules_12.$ternary$protocol.sv:897$563.
    dead port 2/2 on $mux $flatten\rules_13.$ternary$protocol.sv:965$549.
    dead port 2/2 on $mux $flatten\rules_14.$ternary$protocol.sv:1035$543.
    dead port 2/2 on $mux $flatten\rules_15.$ternary$protocol.sv:1103$537.
    dead port 2/2 on $mux $flatten\rules_16.$ternary$protocol.sv:1173$531.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1268$525.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1267$524.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1266$523.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1262$522.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1261$521.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1260$520.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1353$460.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1352$459.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1351$458.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1347$457.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1346$456.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1345$455.
    dead port 2/2 on $mux $flatten\rules_5.$ternary$protocol.sv:411$695.
    dead port 2/2 on $mux $flatten\rules_5.$ternary$protocol.sv:409$694.
    dead port 2/2 on $mux $flatten\rules_5.$ternary$protocol.sv:408$693.
    dead port 2/2 on $mux $flatten\rules_5.$ternary$protocol.sv:396$692.
    dead port 2/2 on $mux $flatten\rules_6.$ternary$protocol.sv:486$670.
    dead port 2/2 on $mux $flatten\rules_6.$ternary$protocol.sv:484$669.
    dead port 2/2 on $mux $flatten\rules_6.$ternary$protocol.sv:483$668.
    dead port 2/2 on $mux $flatten\rules_6.$ternary$protocol.sv:472$667.
    dead port 2/2 on $mux $flatten\rules_7.$ternary$protocol.sv:545$645.
    dead port 2/2 on $mux $flatten\rules_8.$ternary$protocol.sv:617$627.
    dead port 2/2 on $mux $flatten\rules_9.$ternary$protocol.sv:692$609.
    dead port 2/2 on $mux $flatten\rules_9.$ternary$protocol.sv:689$608.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:65$733.
    dead port 2/2 on $mux $flatten\rules_0.$ternary$protocol.sv:66$734.
    dead port 2/2 on $mux $flatten\rules_1.$ternary$protocol.sv:115$720.
    dead port 2/2 on $mux $flatten\rules_10.$ternary$protocol.sv:767$595.
    dead port 2/2 on $mux $flatten\rules_11.$ternary$protocol.sv:841$580.
    dead port 2/2 on $mux $flatten\rules_12.$ternary$protocol.sv:912$565.
    dead port 2/2 on $mux $flatten\rules_13.$ternary$protocol.sv:980$550.
    dead port 2/2 on $mux $flatten\rules_14.$ternary$protocol.sv:1050$544.
    dead port 2/2 on $mux $flatten\rules_15.$ternary$protocol.sv:1118$538.
    dead port 2/2 on $mux $flatten\rules_16.$ternary$protocol.sv:1188$532.
    dead port 2/2 on $mux $flatten\rules_17.$ternary$protocol.sv:1273$526.
    dead port 2/2 on $mux $flatten\rules_18.$ternary$protocol.sv:1358$461.
    dead port 2/2 on $mux $flatten\rules_2.$ternary$protocol.sv:184$715.
    dead port 2/2 on $mux $flatten\rules_3.$ternary$protocol.sv:252$710.
    dead port 2/2 on $mux $flatten\rules_4.$ternary$protocol.sv:322$703.
    dead port 2/2 on $mux $flatten\rules_5.$ternary$protocol.sv:412$696.
    dead port 2/2 on $mux $flatten\rules_6.$ternary$protocol.sv:487$671.
    dead port 2/2 on $mux $flatten\rules_7.$ternary$protocol.sv:554$646.
    dead port 2/2 on $mux $flatten\rules_8.$ternary$protocol.sv:626$628.
    dead port 2/2 on $mux $flatten\rules_9.$ternary$protocol.sv:697$610.
Removed 66 multiplexer ports.
<suppressed ~26 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

11.6. Executing OPT_SHARE pass.

11.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1003 ($dff) from module system (D = $auto$rtlil.cc:3138:Anyseq$1033, Q = $formal$protocol.sv:4138$3_CHECK, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$1098 ($dffe) from module system (D = $0\channel1_reg_0[2:0], Q = \channel1_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1095 ($dffe) from module system (D = $0\channel1_reg_1[2:0], Q = \channel1_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1092 ($dffe) from module system (D = $0\channel1_reg_2[2:0], Q = \channel1_reg_2).
Adding EN signal on $auto$ff.cc:262:slice$1089 ($dffe) from module system (D = $0\channel2_4_reg_0[2:0], Q = \channel2_4_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1086 ($dffe) from module system (D = $0\channel2_4_reg_1[2:0], Q = \channel2_4_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1083 ($dffe) from module system (D = $0\channel2_4_reg_2[2:0], Q = \channel2_4_reg_2).
Adding EN signal on $auto$ff.cc:262:slice$1080 ($dffe) from module system (D = $0\channel3_reg_0[2:0], Q = \channel3_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1077 ($dffe) from module system (D = $0\channel3_reg_1[2:0], Q = \channel3_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1074 ($dffe) from module system (D = $0\channel3_reg_2[2:0], Q = \channel3_reg_2).
Adding EN signal on $auto$ff.cc:262:slice$1071 ($dffe) from module system (D = $0\home_sharer_list_reg_0[0:0], Q = \home_sharer_list_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1068 ($dffe) from module system (D = $0\home_sharer_list_reg_1[0:0], Q = \home_sharer_list_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1065 ($dffe) from module system (D = $0\home_sharer_list_reg_2[0:0], Q = \home_sharer_list_reg_2).
Adding EN signal on $auto$ff.cc:262:slice$1062 ($dffe) from module system (D = $0\home_invalidate_list_reg_0[0:0], Q = \home_invalidate_list_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1059 ($dffe) from module system (D = $0\home_invalidate_list_reg_1[0:0], Q = \home_invalidate_list_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1056 ($dffe) from module system (D = $0\home_invalidate_list_reg_2[0:0], Q = \home_invalidate_list_reg_2).
Adding EN signal on $auto$ff.cc:262:slice$1053 ($dffe) from module system (D = $0\home_exclusive_granted_reg[0:0], Q = \home_exclusive_granted_reg).
Adding EN signal on $auto$ff.cc:262:slice$1050 ($dffe) from module system (D = $0\home_current_command_reg[2:0], Q = \home_current_command_reg).
Adding EN signal on $auto$ff.cc:262:slice$1047 ($dffe) from module system (D = $0\home_current_client_reg[1:0], Q = \home_current_client_reg).
Adding EN signal on $auto$ff.cc:262:slice$1044 ($dffe) from module system (D = $0\cache_reg_0[1:0], Q = \cache_reg_0).
Adding EN signal on $auto$ff.cc:262:slice$1041 ($dffe) from module system (D = $0\cache_reg_1[1:0], Q = \cache_reg_1).
Adding EN signal on $auto$ff.cc:262:slice$1038 ($dffe) from module system (D = $0\cache_reg_2[1:0], Q = \cache_reg_2).

11.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Removed 209 unused cells and 222 unused wires.
<suppressed ~287 debug messages>

11.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.
<suppressed ~318 debug messages>

11.10. Rerunning OPT passes. (Maybe there is more to do..)

11.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

11.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system.
Performed a total of 0 changes.

11.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
<suppressed ~759 debug messages>
Removed a total of 253 cells.

11.14. Executing OPT_SHARE pass.

11.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$1790 ($dffe) from module system (D = $procmux$803_Y, Q = \home_current_command_reg, rval = 3'000).
Adding SRST signal on $auto$ff.cc:262:slice$1351 ($dffe) from module system (D = $procmux$935_Y [2], Q = \channel2_4_reg_2 [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$1351 ($dffe) from module system (D = $procmux$938_Y [1:0], Q = \channel2_4_reg_2 [1:0], rval = 2'10).
Adding SRST signal on $auto$ff.cc:262:slice$1308 ($dffe) from module system (D = $procmux$947_Y [2], Q = \channel2_4_reg_1 [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$1308 ($dffe) from module system (D = $procmux$950_Y [1:0], Q = \channel2_4_reg_1 [1:0], rval = 2'10).
Adding SRST signal on $auto$ff.cc:262:slice$1263 ($dffe) from module system (D = $procmux$959_Y [2], Q = \channel2_4_reg_0 [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$1263 ($dffe) from module system (D = $procmux$962_Y [1:0], Q = \channel2_4_reg_0 [1:0], rval = 2'10).

11.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Removed 5 unused cells and 308 unused wires.
<suppressed ~6 debug messages>

11.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.

11.18. Rerunning OPT passes. (Maybe there is more to do..)

11.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

11.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system.
Performed a total of 0 changes.

11.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

11.22. Executing OPT_SHARE pass.

11.23. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$1950 ($dffe) from module system (D = \_GEN_314, Q = \cache_reg_2, rval = 2'10).
Adding SRST signal on $auto$ff.cc:262:slice$1911 ($dffe) from module system (D = \_GEN_292, Q = \cache_reg_1, rval = 2'10).
Adding SRST signal on $auto$ff.cc:262:slice$1829 ($dffe) from module system (D = \_GEN_122, Q = \home_current_client_reg, rval = 2'10).
Adding SRST signal on $auto$ff.cc:262:slice$1751 ($dffe) from module system (D = $auto$rtlil.cc:3138:Anyseq$1132, Q = \home_exclusive_granted_reg, rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1712 ($dffe) from module system (D = \_GEN_140, Q = \home_invalidate_list_reg_2, rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1673 ($dffe) from module system (D = \_GEN_139, Q = \home_invalidate_list_reg_1, rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1474 ($dffe) from module system (D = $auto$rtlil.cc:3138:Anyseq$1118 [1:0], Q = \channel3_reg_2 [1:0], rval = 2'00).
Adding SRST signal on $auto$ff.cc:262:slice$1474 ($dffe) from module system (D = \_GEN_218 [2], Q = \channel3_reg_2 [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$1435 ($dffe) from module system (D = $auto$rtlil.cc:3138:Anyseq$1116 [1:0], Q = \channel3_reg_1 [1:0], rval = 2'00).
Adding SRST signal on $auto$ff.cc:262:slice$1435 ($dffe) from module system (D = \_GEN_196 [2], Q = \channel3_reg_1 [2], rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$1224 ($dffe) from module system (D = $auto$rtlil.cc:3138:Anyseq$1106 [2], Q = \channel1_reg_2 [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1224 ($dffe) from module system (D = \_GEN_107 [1], Q = \channel1_reg_2 [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1224 ($dffe) from module system (D = \_GEN_44 [0], Q = \channel1_reg_2 [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1185 ($dffe) from module system (D = $auto$rtlil.cc:3138:Anyseq$1104 [2], Q = \channel1_reg_1 [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1185 ($dffe) from module system (D = \_GEN_64 [1], Q = \channel1_reg_1 [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$1185 ($dffe) from module system (D = \_GEN_22 [0], Q = \channel1_reg_1 [0], rval = 1'0).

11.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Removed 12 unused cells and 70 unused wires.
<suppressed ~78 debug messages>

11.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.

11.26. Rerunning OPT passes. (Maybe there is more to do..)

11.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

11.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system.
Performed a total of 0 changes.

11.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
Removed a total of 0 cells.

11.30. Executing OPT_SHARE pass.

11.31. Executing OPT_DFF pass (perform DFF optimizations).

11.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..

11.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.

11.34. Finished OPT passes. (There is nothing left to do.)

12. Executing TECHMAP pass (map to technology primitives).

12.1. Executing Verilog-2005 frontend: /Developer/github/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/Developer/github/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

12.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $sdff.
No more expansions possible.
<suppressed ~302 debug messages>

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system.
<suppressed ~706 debug messages>

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system'.
<suppressed ~1299 debug messages>
Removed a total of 433 cells.

13.3. Executing OPT_DFF pass (perform DFF optimizations).

13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Removed 21 unused cells and 335 unused wires.
<suppressed ~22 debug messages>

13.5. Finished fast OPT passes.

14. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `\system' to `<abc-temp-dir>/input.blif'..
Extracted 685 gates and 766 wires to a netlist network with 79 inputs and 40 outputs.

15.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      728
ABC RESULTS:               NOT cells:      371
ABC RESULTS:        internal signals:      647
ABC RESULTS:           input signals:       79
ABC RESULTS:          output signals:       40
Removing temp directory.

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system..
Removed 0 unused cells and 676 unused wires.
<suppressed ~179 debug messages>

17. Printing statistics.

=== system ===

   Number of wires:               2901
   Number of wire bits:           4888
   Number of public wires:        1764
   Number of public wire bits:    3751
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1162
     $_AND_                        728
     $_DFF_P_                       39
     $_NOT_                        371
     $anyseq                        19
     $assert                         3
     $assume                         1
     $initstate                      1

18. Executing AIGER backend.

End of script. Logfile hash: 77f68af3c8, CPU: user 0.48s system 0.01s, MEM: 19.72 MB peak
Yosys 0.16+63 (git sha1 11e75bc27, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 25% 9x opt_clean (0 sec), 18% 8x opt_expr (0 sec), ...
