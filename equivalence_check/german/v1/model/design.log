
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+53 (git sha1 8216b23fb, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: protocol.sv
Parsing SystemVerilog input from `protocol.sv' to AST representation.
Storing AST representation for module `$abstract\Init'.
Storing AST representation for module `$abstract\Init_1'.
Storing AST representation for module `$abstract\Store'.
Storing AST representation for module `$abstract\Store_1'.
Storing AST representation for module `$abstract\Store_2'.
Storing AST representation for module `$abstract\Store_3'.
Storing AST representation for module `$abstract\SendReqS'.
Storing AST representation for module `$abstract\SendReqS_1'.
Storing AST representation for module `$abstract\SendReqE'.
Storing AST representation for module `$abstract\SendReqE_1'.
Storing AST representation for module `$abstract\RecvReqS'.
Storing AST representation for module `$abstract\RecvReqS_1'.
Storing AST representation for module `$abstract\RecvReqE'.
Storing AST representation for module `$abstract\RecvReqE_1'.
Storing AST representation for module `$abstract\SendInv'.
Storing AST representation for module `$abstract\SendInv_1'.
Storing AST representation for module `$abstract\SendGntS'.
Storing AST representation for module `$abstract\SendGntS_1'.
Storing AST representation for module `$abstract\SendGntE'.
Storing AST representation for module `$abstract\SendGntE_1'.
Storing AST representation for module `$abstract\RecvGntS'.
Storing AST representation for module `$abstract\RecvGntS_1'.
Storing AST representation for module `$abstract\RecvGntE'.
Storing AST representation for module `$abstract\RecvGntE_1'.
Storing AST representation for module `$abstract\SendInvAck'.
Storing AST representation for module `$abstract\SendInvAck_1'.
Storing AST representation for module `$abstract\RecvInvAck'.
Storing AST representation for module `$abstract\RecvInvAck_1'.
Storing AST representation for module `$abstract\system'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\system'.
Generating RTLIL representation for module `\system'.

2.2.1. Analyzing design hierarchy..
Top module:  \system

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvInvAck_1'.
Generating RTLIL representation for module `\RecvInvAck_1'.

2.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvInvAck'.
Generating RTLIL representation for module `\RecvInvAck'.

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\SendInvAck_1'.
Generating RTLIL representation for module `\SendInvAck_1'.

2.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\SendInvAck'.
Generating RTLIL representation for module `\SendInvAck'.

2.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvGntE_1'.
Generating RTLIL representation for module `\RecvGntE_1'.

2.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvGntE'.
Generating RTLIL representation for module `\RecvGntE'.

2.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvGntS_1'.
Generating RTLIL representation for module `\RecvGntS_1'.

2.2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvGntS'.
Generating RTLIL representation for module `\RecvGntS'.

2.2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\SendGntE_1'.
Generating RTLIL representation for module `\SendGntE_1'.

2.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\SendGntE'.
Generating RTLIL representation for module `\SendGntE'.

2.2.12. Executing AST frontend in derive mode using pre-parsed AST for module `\SendGntS_1'.
Generating RTLIL representation for module `\SendGntS_1'.

2.2.13. Executing AST frontend in derive mode using pre-parsed AST for module `\SendGntS'.
Generating RTLIL representation for module `\SendGntS'.

2.2.14. Executing AST frontend in derive mode using pre-parsed AST for module `\SendInv_1'.
Generating RTLIL representation for module `\SendInv_1'.

2.2.15. Executing AST frontend in derive mode using pre-parsed AST for module `\SendInv'.
Generating RTLIL representation for module `\SendInv'.

2.2.16. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvReqE_1'.
Generating RTLIL representation for module `\RecvReqE_1'.

2.2.17. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvReqE'.
Generating RTLIL representation for module `\RecvReqE'.

2.2.18. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvReqS_1'.
Generating RTLIL representation for module `\RecvReqS_1'.

2.2.19. Executing AST frontend in derive mode using pre-parsed AST for module `\RecvReqS'.
Generating RTLIL representation for module `\RecvReqS'.

2.2.20. Executing AST frontend in derive mode using pre-parsed AST for module `\SendReqE_1'.
Generating RTLIL representation for module `\SendReqE_1'.

2.2.21. Executing AST frontend in derive mode using pre-parsed AST for module `\SendReqE'.
Generating RTLIL representation for module `\SendReqE'.

2.2.22. Executing AST frontend in derive mode using pre-parsed AST for module `\SendReqS_1'.
Generating RTLIL representation for module `\SendReqS_1'.

2.2.23. Executing AST frontend in derive mode using pre-parsed AST for module `\SendReqS'.
Generating RTLIL representation for module `\SendReqS'.

2.2.24. Executing AST frontend in derive mode using pre-parsed AST for module `\Store_3'.
Generating RTLIL representation for module `\Store_3'.

2.2.25. Executing AST frontend in derive mode using pre-parsed AST for module `\Store_2'.
Generating RTLIL representation for module `\Store_2'.

2.2.26. Executing AST frontend in derive mode using pre-parsed AST for module `\Store_1'.
Generating RTLIL representation for module `\Store_1'.

2.2.27. Executing AST frontend in derive mode using pre-parsed AST for module `\Store'.
Generating RTLIL representation for module `\Store'.

2.2.28. Executing AST frontend in derive mode using pre-parsed AST for module `\Init_1'.
Generating RTLIL representation for module `\Init_1'.

2.2.29. Executing AST frontend in derive mode using pre-parsed AST for module `\Init'.
Generating RTLIL representation for module `\Init'.

2.2.30. Analyzing design hierarchy..
Top module:  \system
Used module:     \RecvInvAck_1
Used module:     \RecvInvAck
Used module:     \SendInvAck_1
Used module:     \SendInvAck
Used module:     \RecvGntE_1
Used module:     \RecvGntE
Used module:     \RecvGntS_1
Used module:     \RecvGntS
Used module:     \SendGntE_1
Used module:     \SendGntE
Used module:     \SendGntS_1
Used module:     \SendGntS
Used module:     \SendInv_1
Used module:     \SendInv
Used module:     \RecvReqE_1
Used module:     \RecvReqE
Used module:     \RecvReqS_1
Used module:     \RecvReqS
Used module:     \SendReqE_1
Used module:     \SendReqE
Used module:     \SendReqS_1
Used module:     \SendReqS
Used module:     \Store_3
Used module:     \Store_2
Used module:     \Store_1
Used module:     \Store
Used module:     \Init_1
Used module:     \Init

2.2.31. Analyzing design hierarchy..
Top module:  \system
Used module:     \RecvInvAck_1
Used module:     \RecvInvAck
Used module:     \SendInvAck_1
Used module:     \SendInvAck
Used module:     \RecvGntE_1
Used module:     \RecvGntE
Used module:     \RecvGntS_1
Used module:     \RecvGntS
Used module:     \SendGntE_1
Used module:     \SendGntE
Used module:     \SendGntS_1
Used module:     \SendGntS
Used module:     \SendInv_1
Used module:     \SendInv
Used module:     \RecvReqE_1
Used module:     \RecvReqE
Used module:     \RecvReqS_1
Used module:     \RecvReqS
Used module:     \SendReqE_1
Used module:     \SendReqE
Used module:     \SendReqS_1
Used module:     \SendReqS
Used module:     \Store_3
Used module:     \Store_2
Used module:     \Store_1
Used module:     \Store
Used module:     \Init_1
Used module:     \Init
Removing unused module `$abstract\system'.
Removing unused module `$abstract\RecvInvAck_1'.
Removing unused module `$abstract\RecvInvAck'.
Removing unused module `$abstract\SendInvAck_1'.
Removing unused module `$abstract\SendInvAck'.
Removing unused module `$abstract\RecvGntE_1'.
Removing unused module `$abstract\RecvGntE'.
Removing unused module `$abstract\RecvGntS_1'.
Removing unused module `$abstract\RecvGntS'.
Removing unused module `$abstract\SendGntE_1'.
Removing unused module `$abstract\SendGntE'.
Removing unused module `$abstract\SendGntS_1'.
Removing unused module `$abstract\SendGntS'.
Removing unused module `$abstract\SendInv_1'.
Removing unused module `$abstract\SendInv'.
Removing unused module `$abstract\RecvReqE_1'.
Removing unused module `$abstract\RecvReqE'.
Removing unused module `$abstract\RecvReqS_1'.
Removing unused module `$abstract\RecvReqS'.
Removing unused module `$abstract\SendReqE_1'.
Removing unused module `$abstract\SendReqE'.
Removing unused module `$abstract\SendReqS_1'.
Removing unused module `$abstract\SendReqS'.
Removing unused module `$abstract\Store_3'.
Removing unused module `$abstract\Store_2'.
Removing unused module `$abstract\Store_1'.
Removing unused module `$abstract\Store'.
Removing unused module `$abstract\Init_1'.
Removing unused module `$abstract\Init'.
Removed 29 unused modules.
Module system directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 140 switch rules as full_case in process $proc$protocol.sv:9230$930 in module system.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 35 redundant assignments.
Promoted 3 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\system.$proc$protocol.sv:0$958'.
  Set init value: $formal$protocol.sv:9643$3_EN = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~141 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\system.$proc$protocol.sv:0$958'.
Creating decoders for process `\system.$proc$protocol.sv:0$954'.
Creating decoders for process `\system.$proc$protocol.sv:9641$931'.
     1/2: $0$formal$protocol.sv:9643$3_EN[0:0]$933
     2/2: $0$formal$protocol.sv:9643$3_CHECK[0:0]$932
Creating decoders for process `\system.$proc$protocol.sv:9230$930'.
     1/35: $0\AuxData_reg[1:0]
     2/35: $0\MemData_reg[1:0]
     3/35: $0\CurPtr_reg[1:0]
     4/35: $0\CurCmd_reg[2:0]
     5/35: $0\ExGntd_reg[0:0]
     6/35: $0\ShrSet_reg_2[0:0]
     7/35: $0\ShrSet_reg_1[0:0]
     8/35: $0\ShrSet_reg_0[0:0]
     9/35: $0\InvSet_reg_2[0:0]
    10/35: $0\InvSet_reg_1[0:0]
    11/35: $0\InvSet_reg_0[0:0]
    12/35: $0\Chan3_reg_2_Data[1:0]
    13/35: $0\Chan3_reg_2_Cmd[2:0]
    14/35: $0\Chan3_reg_1_Data[1:0]
    15/35: $0\Chan3_reg_1_Cmd[2:0]
    16/35: $0\Chan3_reg_0_Data[1:0]
    17/35: $0\Chan3_reg_0_Cmd[2:0]
    18/35: $0\Chan2_reg_2_Data[1:0]
    19/35: $0\Chan2_reg_2_Cmd[2:0]
    20/35: $0\Chan2_reg_1_Data[1:0]
    21/35: $0\Chan2_reg_1_Cmd[2:0]
    22/35: $0\Chan2_reg_0_Data[1:0]
    23/35: $0\Chan2_reg_0_Cmd[2:0]
    24/35: $0\Chan1_reg_2_Data[1:0]
    25/35: $0\Chan1_reg_2_Cmd[2:0]
    26/35: $0\Chan1_reg_1_Data[1:0]
    27/35: $0\Chan1_reg_1_Cmd[2:0]
    28/35: $0\Chan1_reg_0_Data[1:0]
    29/35: $0\Chan1_reg_0_Cmd[2:0]
    30/35: $0\Cache_reg_2_Data[1:0]
    31/35: $0\Cache_reg_2_State[1:0]
    32/35: $0\Cache_reg_1_Data[1:0]
    33/35: $0\Cache_reg_1_State[1:0]
    34/35: $0\Cache_reg_0_Data[1:0]
    35/35: $0\Cache_reg_0_State[1:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\system.$formal$protocol.sv:9637$1_CHECK' from process `\system.$proc$protocol.sv:0$954'.
No latch inferred for signal `\system.$formal$protocol.sv:9637$1_EN' from process `\system.$proc$protocol.sv:0$954'.

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\system.$formal$protocol.sv:9643$3_CHECK' using process `\system.$proc$protocol.sv:9641$931'.
  created $dff cell `$procdff$1902' with positive edge clock.
Creating register for signal `\system.$formal$protocol.sv:9643$3_EN' using process `\system.$proc$protocol.sv:9641$931'.
  created $dff cell `$procdff$1903' with positive edge clock.
Creating register for signal `\system.\Cache_reg_0_State' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1904' with positive edge clock.
Creating register for signal `\system.\Cache_reg_0_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1905' with positive edge clock.
Creating register for signal `\system.\Cache_reg_1_State' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1906' with positive edge clock.
Creating register for signal `\system.\Cache_reg_1_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1907' with positive edge clock.
Creating register for signal `\system.\Cache_reg_2_State' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1908' with positive edge clock.
Creating register for signal `\system.\Cache_reg_2_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1909' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_0_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1910' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_0_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1911' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_1_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1912' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_1_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1913' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_2_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1914' with positive edge clock.
Creating register for signal `\system.\Chan1_reg_2_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1915' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_0_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1916' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_0_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1917' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_1_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1918' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_1_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1919' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_2_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1920' with positive edge clock.
Creating register for signal `\system.\Chan2_reg_2_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1921' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_0_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1922' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_0_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1923' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_1_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1924' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_1_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1925' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_2_Cmd' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1926' with positive edge clock.
Creating register for signal `\system.\Chan3_reg_2_Data' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1927' with positive edge clock.
Creating register for signal `\system.\InvSet_reg_0' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1928' with positive edge clock.
Creating register for signal `\system.\InvSet_reg_1' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1929' with positive edge clock.
Creating register for signal `\system.\InvSet_reg_2' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1930' with positive edge clock.
Creating register for signal `\system.\ShrSet_reg_0' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1931' with positive edge clock.
Creating register for signal `\system.\ShrSet_reg_1' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1932' with positive edge clock.
Creating register for signal `\system.\ShrSet_reg_2' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1933' with positive edge clock.
Creating register for signal `\system.\ExGntd_reg' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1934' with positive edge clock.
Creating register for signal `\system.\CurCmd_reg' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1935' with positive edge clock.
Creating register for signal `\system.\CurPtr_reg' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1936' with positive edge clock.
Creating register for signal `\system.\MemData_reg' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1937' with positive edge clock.
Creating register for signal `\system.\AuxData_reg' using process `\system.$proc$protocol.sv:9230$930'.
  created $dff cell `$procdff$1938' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `system.$proc$protocol.sv:0$958'.
Removing empty process `system.$proc$protocol.sv:0$954'.
Found and cleaned up 1 empty switch in `\system.$proc$protocol.sv:9641$931'.
Removing empty process `system.$proc$protocol.sv:9641$931'.
Found and cleaned up 140 empty switches in `\system.$proc$protocol.sv:9230$930'.
Removing empty process `system.$proc$protocol.sv:9230$930'.
Cleaned up 141 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module SendReqS.
<suppressed ~2 debug messages>
Optimizing module SendReqS_1.
<suppressed ~2 debug messages>
Optimizing module SendReqE.
<suppressed ~2 debug messages>
Optimizing module SendReqE_1.
<suppressed ~2 debug messages>
Optimizing module RecvReqS.
<suppressed ~5 debug messages>
Optimizing module RecvReqS_1.
<suppressed ~5 debug messages>
Optimizing module RecvReqE.
<suppressed ~5 debug messages>
Optimizing module RecvReqE_1.
<suppressed ~5 debug messages>
Optimizing module SendInv.
<suppressed ~2 debug messages>
Optimizing module SendInv_1.
<suppressed ~2 debug messages>
Optimizing module SendGntS.
<suppressed ~4 debug messages>
Optimizing module SendGntS_1.
<suppressed ~4 debug messages>
Optimizing module SendGntE.
<suppressed ~5 debug messages>
Optimizing module SendGntE_1.
<suppressed ~5 debug messages>
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module SendInvAck.
<suppressed ~4 debug messages>
Optimizing module SendInvAck_1.
<suppressed ~4 debug messages>
Optimizing module RecvInvAck.
<suppressed ~4 debug messages>
Optimizing module RecvInvAck_1.
<suppressed ~4 debug messages>
Optimizing module system.
<suppressed ~11 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module SendReqS.
Optimizing module SendReqS_1.
Optimizing module SendReqE.
Optimizing module SendReqE_1.
Optimizing module RecvReqS.
Optimizing module RecvReqS_1.
Optimizing module RecvReqE.
Optimizing module RecvReqE_1.
Optimizing module SendInv.
Optimizing module SendInv_1.
Optimizing module SendGntS.
Optimizing module SendGntS_1.
Optimizing module SendGntE.
Optimizing module SendGntE_1.
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module SendInvAck.
Optimizing module SendInvAck_1.
Optimizing module RecvInvAck.
Optimizing module RecvInvAck_1.
Optimizing module system.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \Init_1..
Finding unused cells or wires in module \Store..
Finding unused cells or wires in module \Store_1..
Finding unused cells or wires in module \Store_2..
Finding unused cells or wires in module \Store_3..
Finding unused cells or wires in module \SendReqS..
Finding unused cells or wires in module \SendReqS_1..
Finding unused cells or wires in module \SendReqE..
Finding unused cells or wires in module \SendReqE_1..
Finding unused cells or wires in module \RecvReqS..
Finding unused cells or wires in module \RecvReqS_1..
Finding unused cells or wires in module \RecvReqE..
Finding unused cells or wires in module \RecvReqE_1..
Finding unused cells or wires in module \SendInv..
Finding unused cells or wires in module \SendInv_1..
Finding unused cells or wires in module \SendGntS..
Finding unused cells or wires in module \SendGntS_1..
Finding unused cells or wires in module \SendGntE..
Finding unused cells or wires in module \SendGntE_1..
Finding unused cells or wires in module \RecvGntS..
Finding unused cells or wires in module \RecvGntS_1..
Finding unused cells or wires in module \RecvGntE..
Finding unused cells or wires in module \RecvGntE_1..
Finding unused cells or wires in module \SendInvAck..
Finding unused cells or wires in module \SendInvAck_1..
Finding unused cells or wires in module \RecvInvAck..
Finding unused cells or wires in module \RecvInvAck_1..
Finding unused cells or wires in module \system..
Removed 1 unused cells and 1291 unused wires.
<suppressed ~30 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module Init...
Checking module Init_1...
Checking module RecvGntE...
Checking module RecvGntE_1...
Checking module RecvGntS...
Checking module RecvGntS_1...
Checking module RecvInvAck...
Checking module RecvInvAck_1...
Checking module RecvReqE...
Checking module RecvReqE_1...
Checking module RecvReqS...
Checking module RecvReqS_1...
Checking module SendGntE...
Checking module SendGntE_1...
Checking module SendGntS...
Checking module SendGntS_1...
Checking module SendInv...
Checking module SendInvAck...
Checking module SendInvAck_1...
Checking module SendInv_1...
Checking module SendReqE...
Checking module SendReqE_1...
Checking module SendReqS...
Checking module SendReqS_1...
Checking module Store...
Checking module Store_1...
Checking module Store_2...
Checking module Store_3...
Checking module system...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvInvAck.
Optimizing module RecvInvAck_1.
Optimizing module RecvReqE.
Optimizing module RecvReqE_1.
Optimizing module RecvReqS.
Optimizing module RecvReqS_1.
Optimizing module SendGntE.
Optimizing module SendGntE_1.
Optimizing module SendGntS.
Optimizing module SendGntS_1.
Optimizing module SendInv.
Optimizing module SendInvAck.
Optimizing module SendInvAck_1.
Optimizing module SendInv_1.
Optimizing module SendReqE.
Optimizing module SendReqE_1.
Optimizing module SendReqS.
Optimizing module SendReqS_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module system.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\Init_1'.
Finding identical cells in module `\RecvGntE'.
<suppressed ~6 debug messages>
Finding identical cells in module `\RecvGntE_1'.
<suppressed ~6 debug messages>
Finding identical cells in module `\RecvGntS'.
<suppressed ~6 debug messages>
Finding identical cells in module `\RecvGntS_1'.
<suppressed ~6 debug messages>
Finding identical cells in module `\RecvInvAck'.
<suppressed ~27 debug messages>
Finding identical cells in module `\RecvInvAck_1'.
<suppressed ~27 debug messages>
Finding identical cells in module `\RecvReqE'.
<suppressed ~36 debug messages>
Finding identical cells in module `\RecvReqE_1'.
<suppressed ~36 debug messages>
Finding identical cells in module `\RecvReqS'.
<suppressed ~36 debug messages>
Finding identical cells in module `\RecvReqS_1'.
<suppressed ~36 debug messages>
Finding identical cells in module `\SendGntE'.
<suppressed ~96 debug messages>
Finding identical cells in module `\SendGntE_1'.
<suppressed ~96 debug messages>
Finding identical cells in module `\SendGntS'.
<suppressed ~63 debug messages>
Finding identical cells in module `\SendGntS_1'.
<suppressed ~63 debug messages>
Finding identical cells in module `\SendInv'.
<suppressed ~21 debug messages>
Finding identical cells in module `\SendInvAck'.
<suppressed ~27 debug messages>
Finding identical cells in module `\SendInvAck_1'.
<suppressed ~27 debug messages>
Finding identical cells in module `\SendInv_1'.
<suppressed ~21 debug messages>
Finding identical cells in module `\SendReqE'.
Finding identical cells in module `\SendReqE_1'.
Finding identical cells in module `\SendReqS'.
Finding identical cells in module `\SendReqS_1'.
Finding identical cells in module `\Store'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Store_1'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Store_2'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Store_3'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system'.
<suppressed ~84 debug messages>
Removed a total of 244 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Init..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Init_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvInvAck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$protocol.sv:3014$982: \io_ExGntd_in -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvInvAck_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$protocol.sv:3129$960: \io_ExGntd_in -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInvAck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInvAck_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInv_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~151 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Init.
  Optimizing cells in module \Init_1.
  Optimizing cells in module \RecvGntE.
  Optimizing cells in module \RecvGntE_1.
  Optimizing cells in module \RecvGntS.
  Optimizing cells in module \RecvGntS_1.
  Optimizing cells in module \RecvInvAck.
  Optimizing cells in module \RecvInvAck.
  Optimizing cells in module \RecvInvAck_1.
  Optimizing cells in module \RecvInvAck_1.
  Optimizing cells in module \RecvReqE.
  Optimizing cells in module \RecvReqE_1.
  Optimizing cells in module \RecvReqS.
  Optimizing cells in module \RecvReqS_1.
  Optimizing cells in module \SendGntE.
  Optimizing cells in module \SendGntE_1.
  Optimizing cells in module \SendGntS.
  Optimizing cells in module \SendGntS_1.
  Optimizing cells in module \SendInv.
  Optimizing cells in module \SendInvAck.
  Optimizing cells in module \SendInvAck_1.
  Optimizing cells in module \SendInv_1.
  Optimizing cells in module \SendReqE.
  Optimizing cells in module \SendReqE_1.
  Optimizing cells in module \SendReqS.
  Optimizing cells in module \SendReqS_1.
  Optimizing cells in module \Store.
  Optimizing cells in module \Store_1.
  Optimizing cells in module \Store_2.
  Optimizing cells in module \Store_3.
  Optimizing cells in module \system.
Performed a total of 2 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\Init_1'.
Finding identical cells in module `\RecvGntE'.
Finding identical cells in module `\RecvGntE_1'.
Finding identical cells in module `\RecvGntS'.
Finding identical cells in module `\RecvGntS_1'.
Finding identical cells in module `\RecvInvAck'.
Finding identical cells in module `\RecvInvAck_1'.
Finding identical cells in module `\RecvReqE'.
Finding identical cells in module `\RecvReqE_1'.
Finding identical cells in module `\RecvReqS'.
Finding identical cells in module `\RecvReqS_1'.
Finding identical cells in module `\SendGntE'.
Finding identical cells in module `\SendGntE_1'.
Finding identical cells in module `\SendGntS'.
Finding identical cells in module `\SendGntS_1'.
Finding identical cells in module `\SendInv'.
Finding identical cells in module `\SendInvAck'.
Finding identical cells in module `\SendInvAck_1'.
Finding identical cells in module `\SendInv_1'.
Finding identical cells in module `\SendReqE'.
Finding identical cells in module `\SendReqE_1'.
Finding identical cells in module `\SendReqS'.
Finding identical cells in module `\SendReqS_1'.
Finding identical cells in module `\Store'.
Finding identical cells in module `\Store_1'.
Finding identical cells in module `\Store_2'.
Finding identical cells in module `\Store_3'.
Finding identical cells in module `\system'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \Init_1..
Finding unused cells or wires in module \RecvGntE..
Finding unused cells or wires in module \RecvGntE_1..
Finding unused cells or wires in module \RecvGntS..
Finding unused cells or wires in module \RecvGntS_1..
Finding unused cells or wires in module \RecvInvAck..
Finding unused cells or wires in module \RecvInvAck_1..
Finding unused cells or wires in module \RecvReqE..
Finding unused cells or wires in module \RecvReqE_1..
Finding unused cells or wires in module \RecvReqS..
Finding unused cells or wires in module \RecvReqS_1..
Finding unused cells or wires in module \SendGntE..
Finding unused cells or wires in module \SendGntE_1..
Finding unused cells or wires in module \SendGntS..
Finding unused cells or wires in module \SendGntS_1..
Finding unused cells or wires in module \SendInv..
Finding unused cells or wires in module \SendInvAck..
Finding unused cells or wires in module \SendInvAck_1..
Finding unused cells or wires in module \SendInv_1..
Finding unused cells or wires in module \SendReqE..
Finding unused cells or wires in module \SendReqE_1..
Finding unused cells or wires in module \SendReqS..
Finding unused cells or wires in module \SendReqS_1..
Finding unused cells or wires in module \Store..
Finding unused cells or wires in module \Store_1..
Finding unused cells or wires in module \Store_2..
Finding unused cells or wires in module \Store_3..
Finding unused cells or wires in module \system..
Removed 0 unused cells and 216 unused wires.
<suppressed ~22 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvInvAck.
Optimizing module RecvInvAck_1.
Optimizing module RecvReqE.
Optimizing module RecvReqE_1.
Optimizing module RecvReqS.
Optimizing module RecvReqS_1.
Optimizing module SendGntE.
Optimizing module SendGntE_1.
Optimizing module SendGntS.
Optimizing module SendGntS_1.
Optimizing module SendInv.
Optimizing module SendInvAck.
Optimizing module SendInvAck_1.
Optimizing module SendInv_1.
Optimizing module SendReqE.
Optimizing module SendReqE_1.
Optimizing module SendReqS.
Optimizing module SendReqS_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module system.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Init..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Init_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvGntS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvInvAck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvInvAck_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RecvReqS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendGntS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInvAck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInvAck_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendInv_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqE_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SendReqS_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Store_3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~151 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Init.
  Optimizing cells in module \Init_1.
  Optimizing cells in module \RecvGntE.
  Optimizing cells in module \RecvGntE_1.
  Optimizing cells in module \RecvGntS.
  Optimizing cells in module \RecvGntS_1.
  Optimizing cells in module \RecvInvAck.
  Optimizing cells in module \RecvInvAck_1.
  Optimizing cells in module \RecvReqE.
  Optimizing cells in module \RecvReqE_1.
  Optimizing cells in module \RecvReqS.
  Optimizing cells in module \RecvReqS_1.
  Optimizing cells in module \SendGntE.
  Optimizing cells in module \SendGntE_1.
  Optimizing cells in module \SendGntS.
  Optimizing cells in module \SendGntS_1.
  Optimizing cells in module \SendInv.
  Optimizing cells in module \SendInvAck.
  Optimizing cells in module \SendInvAck_1.
  Optimizing cells in module \SendInv_1.
  Optimizing cells in module \SendReqE.
  Optimizing cells in module \SendReqE_1.
  Optimizing cells in module \SendReqS.
  Optimizing cells in module \SendReqS_1.
  Optimizing cells in module \Store.
  Optimizing cells in module \Store_1.
  Optimizing cells in module \Store_2.
  Optimizing cells in module \Store_3.
  Optimizing cells in module \system.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\Init_1'.
Finding identical cells in module `\RecvGntE'.
Finding identical cells in module `\RecvGntE_1'.
Finding identical cells in module `\RecvGntS'.
Finding identical cells in module `\RecvGntS_1'.
Finding identical cells in module `\RecvInvAck'.
Finding identical cells in module `\RecvInvAck_1'.
Finding identical cells in module `\RecvReqE'.
Finding identical cells in module `\RecvReqE_1'.
Finding identical cells in module `\RecvReqS'.
Finding identical cells in module `\RecvReqS_1'.
Finding identical cells in module `\SendGntE'.
Finding identical cells in module `\SendGntE_1'.
Finding identical cells in module `\SendGntS'.
Finding identical cells in module `\SendGntS_1'.
Finding identical cells in module `\SendInv'.
Finding identical cells in module `\SendInvAck'.
Finding identical cells in module `\SendInvAck_1'.
Finding identical cells in module `\SendInv_1'.
Finding identical cells in module `\SendReqE'.
Finding identical cells in module `\SendReqE_1'.
Finding identical cells in module `\SendReqS'.
Finding identical cells in module `\SendReqS_1'.
Finding identical cells in module `\Store'.
Finding identical cells in module `\Store_1'.
Finding identical cells in module `\Store_2'.
Finding identical cells in module `\Store_3'.
Finding identical cells in module `\system'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \Init_1..
Finding unused cells or wires in module \RecvGntE..
Finding unused cells or wires in module \RecvGntE_1..
Finding unused cells or wires in module \RecvGntS..
Finding unused cells or wires in module \RecvGntS_1..
Finding unused cells or wires in module \RecvInvAck..
Finding unused cells or wires in module \RecvInvAck_1..
Finding unused cells or wires in module \RecvReqE..
Finding unused cells or wires in module \RecvReqE_1..
Finding unused cells or wires in module \RecvReqS..
Finding unused cells or wires in module \RecvReqS_1..
Finding unused cells or wires in module \SendGntE..
Finding unused cells or wires in module \SendGntE_1..
Finding unused cells or wires in module \SendGntS..
Finding unused cells or wires in module \SendGntS_1..
Finding unused cells or wires in module \SendInv..
Finding unused cells or wires in module \SendInvAck..
Finding unused cells or wires in module \SendInvAck_1..
Finding unused cells or wires in module \SendInv_1..
Finding unused cells or wires in module \SendReqE..
Finding unused cells or wires in module \SendReqE_1..
Finding unused cells or wires in module \SendReqS..
Finding unused cells or wires in module \SendReqS_1..
Finding unused cells or wires in module \Store..
Finding unused cells or wires in module \Store_1..
Finding unused cells or wires in module \Store_2..
Finding unused cells or wires in module \Store_3..
Finding unused cells or wires in module \system..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvInvAck.
Optimizing module RecvInvAck_1.
Optimizing module RecvReqE.
Optimizing module RecvReqE_1.
Optimizing module RecvReqS.
Optimizing module RecvReqS_1.
Optimizing module SendGntE.
Optimizing module SendGntE_1.
Optimizing module SendGntS.
Optimizing module SendGntS_1.
Optimizing module SendInv.
Optimizing module SendInvAck.
Optimizing module SendInvAck_1.
Optimizing module SendInv_1.
Optimizing module SendReqE.
Optimizing module SendReqE_1.
Optimizing module SendReqS.
Optimizing module SendReqS_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module system.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell RecvReqE.$eq$protocol.sv:1406$1324 ($eq).
Removed top 1 bits (of 3) from port B of cell RecvReqE_1.$eq$protocol.sv:1520$1299 ($eq).
Removed top 2 bits (of 3) from port B of cell RecvReqS.$eq$protocol.sv:1178$1374 ($eq).
Removed top 2 bits (of 3) from port B of cell RecvReqS_1.$eq$protocol.sv:1292$1349 ($eq).
Removed top 1 bits (of 3) from port B of cell SendGntE.$eq$protocol.sv:2097$1140 ($eq).
Removed top 1 bits (of 2) from port B of cell SendGntE.$eq$protocol.sv:2097$1141 ($eq).
Removed top 1 bits (of 3) from port B of cell SendGntE_1.$eq$protocol.sv:2219$1087 ($eq).
Removed top 2 bits (of 3) from port B of cell SendGntS.$eq$protocol.sv:1860$1226 ($eq).
Removed top 1 bits (of 2) from port B of cell SendGntS.$eq$protocol.sv:1860$1227 ($eq).
Removed top 2 bits (of 3) from port B of cell SendGntS_1.$eq$protocol.sv:1977$1190 ($eq).
Removed top 1 bits (of 3) from port B of cell SendInv.$eq$protocol.sv:1634$1281 ($eq).
Removed top 2 bits (of 3) from port B of cell SendInv.$eq$protocol.sv:1634$1282 ($eq).
Removed top 1 bits (of 3) from port B of cell SendInvAck.$eq$protocol.sv:2787$1028 ($eq).
Removed top 1 bits (of 3) from port B of cell SendInvAck_1.$eq$protocol.sv:2901$1006 ($eq).
Removed top 1 bits (of 3) from port B of cell SendInv_1.$eq$protocol.sv:1747$1263 ($eq).
Removed top 2 bits (of 3) from port B of cell SendInv_1.$eq$protocol.sv:1747$1264 ($eq).
Removed top 1 bits (of 2) from port B of cell SendReqE.$eq$protocol.sv:956$1407 ($eq).
Removed top 1 bits (of 2) from port B of cell SendReqE_1.$eq$protocol.sv:1067$1400 ($eq).
Removed top 4 bits (of 5) from port B of cell system.$eq$protocol.sv:5307$40 ($eq).
Removed top 3 bits (of 5) from port B of cell system.$eq$protocol.sv:5343$76 ($eq).
Removed top 3 bits (of 5) from port B of cell system.$eq$protocol.sv:5379$112 ($eq).
Removed top 2 bits (of 5) from port B of cell system.$eq$protocol.sv:5415$148 ($eq).
Removed top 2 bits (of 5) from port B of cell system.$eq$protocol.sv:5451$184 ($eq).
Removed top 2 bits (of 5) from port B of cell system.$eq$protocol.sv:5487$220 ($eq).
Removed top 2 bits (of 5) from port B of cell system.$eq$protocol.sv:5523$256 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5559$292 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5595$328 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5631$364 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5667$400 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5703$436 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5739$472 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5775$508 ($eq).
Removed top 1 bits (of 5) from port B of cell system.$eq$protocol.sv:5811$544 ($eq).
Removed top 1 bits (of 2) from port B of cell system.$eq$protocol.sv:6140$879 ($eq).
Removed top 1 bits (of 3) from port B of cell system.$eq$protocol.sv:6141$882 ($eq).
Removed top 1 bits (of 2) from port B of cell system.$eq$protocol.sv:6141$883 ($eq).
Removed top 1 bits (of 2) from port B of cell system.$eq$protocol.sv:9644$938 ($eq).
Removed top 2 bits (of 3) from port B of cell system.$eq$protocol.sv:9645$939 ($eq).
Removed top 1 bits (of 2) from port B of cell system.$eq$protocol.sv:9645$940 ($eq).
Removed top 1 bits (of 2) from port B of cell system.$eq$protocol.sv:9645$942 ($eq).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \Init_1..
Finding unused cells or wires in module \RecvGntE..
Finding unused cells or wires in module \RecvGntE_1..
Finding unused cells or wires in module \RecvGntS..
Finding unused cells or wires in module \RecvGntS_1..
Finding unused cells or wires in module \RecvInvAck..
Finding unused cells or wires in module \RecvInvAck_1..
Finding unused cells or wires in module \RecvReqE..
Finding unused cells or wires in module \RecvReqE_1..
Finding unused cells or wires in module \RecvReqS..
Finding unused cells or wires in module \RecvReqS_1..
Finding unused cells or wires in module \SendGntE..
Finding unused cells or wires in module \SendGntE_1..
Finding unused cells or wires in module \SendGntS..
Finding unused cells or wires in module \SendGntS_1..
Finding unused cells or wires in module \SendInv..
Finding unused cells or wires in module \SendInvAck..
Finding unused cells or wires in module \SendInvAck_1..
Finding unused cells or wires in module \SendInv_1..
Finding unused cells or wires in module \SendReqE..
Finding unused cells or wires in module \SendReqE_1..
Finding unused cells or wires in module \SendReqS..
Finding unused cells or wires in module \SendReqS_1..
Finding unused cells or wires in module \Store..
Finding unused cells or wires in module \Store_1..
Finding unused cells or wires in module \Store_2..
Finding unused cells or wires in module \Store_3..
Finding unused cells or wires in module \system..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Init.
Optimizing module Init_1.
Optimizing module RecvGntE.
Optimizing module RecvGntE_1.
Optimizing module RecvGntS.
Optimizing module RecvGntS_1.
Optimizing module RecvInvAck.
Optimizing module RecvInvAck_1.
Optimizing module RecvReqE.
Optimizing module RecvReqE_1.
Optimizing module RecvReqS.
Optimizing module RecvReqS_1.
Optimizing module SendGntE.
Optimizing module SendGntE_1.
Optimizing module SendGntS.
Optimizing module SendGntS_1.
Optimizing module SendInv.
Optimizing module SendInvAck.
Optimizing module SendInvAck_1.
Optimizing module SendInv_1.
Optimizing module SendReqE.
Optimizing module SendReqE_1.
Optimizing module SendReqS.
Optimizing module SendReqS_1.
Optimizing module Store.
Optimizing module Store_1.
Optimizing module Store_2.
Optimizing module Store_3.
Optimizing module system.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Init'.
Finding identical cells in module `\Init_1'.
Finding identical cells in module `\RecvGntE'.
Finding identical cells in module `\RecvGntE_1'.
Finding identical cells in module `\RecvGntS'.
Finding identical cells in module `\RecvGntS_1'.
Finding identical cells in module `\RecvInvAck'.
Finding identical cells in module `\RecvInvAck_1'.
Finding identical cells in module `\RecvReqE'.
Finding identical cells in module `\RecvReqE_1'.
Finding identical cells in module `\RecvReqS'.
Finding identical cells in module `\RecvReqS_1'.
Finding identical cells in module `\SendGntE'.
Finding identical cells in module `\SendGntE_1'.
Finding identical cells in module `\SendGntS'.
Finding identical cells in module `\SendGntS_1'.
Finding identical cells in module `\SendInv'.
Finding identical cells in module `\SendInvAck'.
Finding identical cells in module `\SendInvAck_1'.
Finding identical cells in module `\SendInv_1'.
Finding identical cells in module `\SendReqE'.
Finding identical cells in module `\SendReqE_1'.
Finding identical cells in module `\SendReqS'.
Finding identical cells in module `\SendReqS_1'.
Finding identical cells in module `\Store'.
Finding identical cells in module `\Store_1'.
Finding identical cells in module `\Store_2'.
Finding identical cells in module `\Store_3'.
Finding identical cells in module `\system'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Init..
Finding unused cells or wires in module \Init_1..
Finding unused cells or wires in module \RecvGntE..
Finding unused cells or wires in module \RecvGntE_1..
Finding unused cells or wires in module \RecvGntS..
Finding unused cells or wires in module \RecvGntS_1..
Finding unused cells or wires in module \RecvInvAck..
Finding unused cells or wires in module \RecvInvAck_1..
Finding unused cells or wires in module \RecvReqE..
Finding unused cells or wires in module \RecvReqE_1..
Finding unused cells or wires in module \RecvReqS..
Finding unused cells or wires in module \RecvReqS_1..
Finding unused cells or wires in module \SendGntE..
Finding unused cells or wires in module \SendGntE_1..
Finding unused cells or wires in module \SendGntS..
Finding unused cells or wires in module \SendGntS_1..
Finding unused cells or wires in module \SendInv..
Finding unused cells or wires in module \SendInvAck..
Finding unused cells or wires in module \SendInvAck_1..
Finding unused cells or wires in module \SendInv_1..
Finding unused cells or wires in module \SendReqE..
Finding unused cells or wires in module \SendReqE_1..
Finding unused cells or wires in module \SendReqS..
Finding unused cells or wires in module \SendReqS_1..
Finding unused cells or wires in module \Store..
Finding unused cells or wires in module \Store_1..
Finding unused cells or wires in module \Store_2..
Finding unused cells or wires in module \Store_3..
Finding unused cells or wires in module \system..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== Init ===

   Number of wires:                 71
   Number of wire bits:            147
   Number of public wires:          71
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $mux                           16

=== Init_1 ===

   Number of wires:                 71
   Number of wire bits:            147
   Number of public wires:          71
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $mux                           16

=== RecvGntE ===

   Number of wires:                 75
   Number of wire bits:            155
   Number of public wires:          74
   Number of public wire bits:     154
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            6

=== RecvGntE_1 ===

   Number of wires:                 75
   Number of wire bits:            155
   Number of public wires:          74
   Number of public wire bits:     154
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            6

=== RecvGntS ===

   Number of wires:                 75
   Number of wire bits:            155
   Number of public wires:          74
   Number of public wire bits:     154
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            6

=== RecvGntS_1 ===

   Number of wires:                 75
   Number of wire bits:            155
   Number of public wires:          74
   Number of public wire bits:     154
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            6

=== RecvInvAck ===

   Number of wires:                 80
   Number of wire bits:            160
   Number of public wires:          77
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $and                            1
     $eq                             1
     $mux                            9
     $reduce_bool                    1

=== RecvInvAck_1 ===

   Number of wires:                 80
   Number of wire bits:            160
   Number of public wires:          77
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $and                            1
     $eq                             1
     $mux                            9
     $reduce_bool                    1

=== RecvReqE ===

   Number of wires:                 79
   Number of wire bits:            160
   Number of public wires:          76
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             1
     $logic_not                      1
     $mux                           10

=== RecvReqE_1 ===

   Number of wires:                 79
   Number of wire bits:            160
   Number of public wires:          76
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             1
     $logic_not                      1
     $mux                           10

=== RecvReqS ===

   Number of wires:                 79
   Number of wire bits:            160
   Number of public wires:          76
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             1
     $logic_not                      1
     $mux                           10

=== RecvReqS_1 ===

   Number of wires:                 79
   Number of wire bits:            160
   Number of public wires:          76
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             1
     $logic_not                      1
     $mux                           10

=== SendGntE ===

   Number of wires:                 87
   Number of wire bits:            168
   Number of public wires:          79
   Number of public wire bits:     160
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $and                            5
     $eq                             2
     $logic_not                      1
     $mux                            8
     $not                            3
     $or                             2

=== SendGntE_1 ===

   Number of wires:                 87
   Number of wire bits:            168
   Number of public wires:          79
   Number of public wire bits:     160
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $and                            5
     $eq                             2
     $logic_not                      1
     $mux                            8
     $not                            3
     $or                             2

=== SendGntS ===

   Number of wires:                 82
   Number of wire bits:            163
   Number of public wires:          75
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            3
     $eq                             2
     $logic_not                      1
     $mux                            7
     $not                            1
     $or                             1

=== SendGntS_1 ===

   Number of wires:                 82
   Number of wire bits:            163
   Number of public wires:          75
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            3
     $eq                             2
     $logic_not                      1
     $mux                            7
     $not                            1
     $or                             1

=== SendInv ===

   Number of wires:                 80
   Number of wire bits:            158
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $and                            3
     $eq                             2
     $logic_not                      1
     $mux                            4
     $or                             1

=== SendInvAck ===

   Number of wires:                 80
   Number of wire bits:            163
   Number of public wires:          76
   Number of public wire bits:     159
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             2
     $logic_not                      1
     $mux                            9

=== SendInvAck_1 ===

   Number of wires:                 80
   Number of wire bits:            163
   Number of public wires:          76
   Number of public wire bits:     159
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             2
     $logic_not                      1
     $mux                            9

=== SendInv_1 ===

   Number of wires:                 80
   Number of wire bits:            158
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $and                            3
     $eq                             2
     $logic_not                      1
     $mux                            4
     $or                             1

=== SendReqE ===

   Number of wires:                 77
   Number of wire bits:            155
   Number of public wires:          72
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $and                            1
     $eq                             1
     $logic_not                      2
     $mux                            2
     $or                             1

=== SendReqE_1 ===

   Number of wires:                 77
   Number of wire bits:            155
   Number of public wires:          72
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $and                            1
     $eq                             1
     $logic_not                      2
     $mux                            2
     $or                             1

=== SendReqS ===

   Number of wires:                 75
   Number of wire bits:            153
   Number of public wires:          72
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $and                            1
     $logic_not                      2
     $mux                            2

=== SendReqS_1 ===

   Number of wires:                 75
   Number of wire bits:            153
   Number of public wires:          72
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $and                            1
     $logic_not                      2
     $mux                            2

=== Store ===

   Number of wires:                 74
   Number of wire bits:            152
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            4

=== Store_1 ===

   Number of wires:                 74
   Number of wire bits:            152
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            4

=== Store_2 ===

   Number of wires:                 74
   Number of wire bits:            152
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            4

=== Store_3 ===

   Number of wires:                 74
   Number of wire bits:            152
   Number of public wires:          73
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            4

=== system ===

   Number of wires:               3121
   Number of wire bits:           6393
   Number of public wires:        2930
   Number of public wire bits:    6050
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1125
     $and                           24
     $assert                         1
     $assume                         1
     $dff                           37
     $eq                            41
     $initstate                      1
     $logic_not                      7
     $mux                          982
     $not                            3
     Init                            1
     Init_1                          1
     RecvGntE                        1
     RecvGntE_1                      1
     RecvGntS                        1
     RecvGntS_1                      1
     RecvInvAck                      1
     RecvInvAck_1                    1
     RecvReqE                        1
     RecvReqE_1                      1
     RecvReqS                        1
     RecvReqS_1                      1
     SendGntE                        1
     SendGntE_1                      1
     SendGntS                        1
     SendGntS_1                      1
     SendInv                         1
     SendInvAck                      1
     SendInvAck_1                    1
     SendInv_1                       1
     SendReqE                        1
     SendReqE_1                      1
     SendReqS                        1
     SendReqS_1                      1
     Store                           1
     Store_1                         1
     Store_2                         1
     Store_3                         1

=== design hierarchy ===

   system                            1
     Init                            1
     Init_1                          1
     RecvGntE                        1
     RecvGntE_1                      1
     RecvGntS                        1
     RecvGntS_1                      1
     RecvInvAck                      1
     RecvInvAck_1                    1
     RecvReqE                        1
     RecvReqE_1                      1
     RecvReqS                        1
     RecvReqS_1                      1
     SendGntE                        1
     SendGntE_1                      1
     SendGntS                        1
     SendGntS_1                      1
     SendInv                         1
     SendInvAck                      1
     SendInvAck_1                    1
     SendInv_1                       1
     SendReqE                        1
     SendReqE_1                      1
     SendReqS                        1
     SendReqS_1                      1
     Store                           1
     Store_1                         1
     Store_2                         1
     Store_3                         1

   Number of wires:               5297
   Number of wire bits:          10795
   Number of public wires:        5012
   Number of public wire bits:   10358
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1397
     $and                           58
     $assert                         1
     $assume                         1
     $dff                           37
     $eq                            73
     $initstate                      1
     $logic_not                     27
     $mux                         1176
     $not                           11
     $or                            10
     $reduce_bool                    2

2.13. Executing CHECK pass (checking for obvious problems).
Checking module Init...
Checking module Init_1...
Checking module RecvGntE...
Checking module RecvGntE_1...
Checking module RecvGntS...
Checking module RecvGntS_1...
Checking module RecvInvAck...
Checking module RecvInvAck_1...
Checking module RecvReqE...
Checking module RecvReqE_1...
Checking module RecvReqS...
Checking module RecvReqS_1...
Checking module SendGntE...
Checking module SendGntE_1...
Checking module SendGntS...
Checking module SendGntS_1...
Checking module SendInv...
Checking module SendInvAck...
Checking module SendInvAck_1...
Checking module SendInv_1...
Checking module SendReqE...
Checking module SendReqE_1...
Checking module SendReqS...
Checking module SendReqS_1...
Checking module Store...
Checking module Store_1...
Checking module Store_2...
Checking module Store_3...
Checking module system...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \system
Used module:     \Init
Used module:     \Init_1
Used module:     \RecvReqS
Used module:     \RecvReqS_1
Used module:     \RecvReqE
Used module:     \RecvReqE_1
Used module:     \SendInv
Used module:     \SendInv_1
Used module:     \SendGntS
Used module:     \SendGntS_1
Used module:     \SendGntE
Used module:     \SendGntE_1
Used module:     \Store
Used module:     \RecvGntS
Used module:     \RecvGntS_1
Used module:     \RecvGntE
Used module:     \RecvGntE_1
Used module:     \SendInvAck
Used module:     \SendInvAck_1
Used module:     \RecvInvAck
Used module:     \RecvInvAck_1
Used module:     \Store_1
Used module:     \Store_2
Used module:     \Store_3
Used module:     \SendReqS
Used module:     \SendReqS_1
Used module:     \SendReqE
Used module:     \SendReqE_1

3.2. Analyzing design hierarchy..
Top module:  \system
Used module:     \Init
Used module:     \Init_1
Used module:     \RecvReqS
Used module:     \RecvReqS_1
Used module:     \RecvReqE
Used module:     \RecvReqE_1
Used module:     \SendInv
Used module:     \SendInv_1
Used module:     \SendGntS
Used module:     \SendGntS_1
Used module:     \SendGntE
Used module:     \SendGntE_1
Used module:     \Store
Used module:     \RecvGntS
Used module:     \RecvGntS_1
Used module:     \RecvGntE
Used module:     \RecvGntE_1
Used module:     \SendInvAck
Used module:     \SendInvAck_1
Used module:     \RecvInvAck
Used module:     \RecvInvAck_1
Used module:     \Store_1
Used module:     \Store_2
Used module:     \Store_3
Used module:     \SendReqS
Used module:     \SendReqS_1
Used module:     \SendReqE
Used module:     \SendReqE_1
Removed 0 unused modules.
Module system directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 9ee17770af, CPU: user 0.40s system 0.04s, MEM: 45.89 MB peak
Yosys 0.26+53 (git sha1 8216b23fb, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 30% 2x hierarchy (0 sec), 15% 5x opt_clean (0 sec), ...
