
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+53 (git sha1 8216b23fb, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `design_smt2.ys' --

1. Executing RTLIL frontend.
Input filename: design_prep.il

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \system
Used module:     \Idle_1
Used module:     \Idle
Used module:     \Exit_1
Used module:     \Exit
Used module:     \Crit_1
Used module:     \Crit
Used module:     \Try_1
Used module:     \Try
Used module:     \Init

2.2. Analyzing design hierarchy..
Top module:  \system
Used module:     \Idle_1
Used module:     \Idle
Used module:     \Exit_1
Used module:     \Exit
Used module:     \Crit_1
Used module:     \Crit
Used module:     \Try_1
Used module:     \Try
Used module:     \Init
Removed 0 unused modules.
Module system directly or indirectly contains formal properties -> setting "keep" attribute.

3. Executing FORMALFF pass.

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Printing statistics.

=== system ===

   Number of wires:                150
   Number of wire bits:            240
   Number of public wires:         123
   Number of public wire bits:     201
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $and                            2
     $anyinit                        5
     $anyseq                         1
     $assert                         1
     $assume                         2
     $eq                             8
     $ff                             1
     $initstate                      1
     $logic_and                      1
     $logic_not                      3
     $mux                           38
     $not                            2
     Crit                            1
     Crit_1                          1
     Exit                            1
     Exit_1                          1
     Idle                            1
     Idle_1                          1
     Init                            1
     Try                             1
     Try_1                           1

=== Try_1 ===

   Number of wires:                 11
   Number of wire bits:             18
   Number of public wires:          10
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $logic_not                      1
     $mux                            2

=== Try ===

   Number of wires:                 11
   Number of wire bits:             18
   Number of public wires:          10
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $logic_not                      1
     $mux                            2

=== Init ===

   Number of wires:                  9
   Number of wire bits:             15
   Number of public wires:           9
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $mux                            2
     $or                             1

=== Idle_1 ===

   Number of wires:                 12
   Number of wire bits:             19
   Number of public wires:          11
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            3
     $or                             1

=== Idle ===

   Number of wires:                 12
   Number of wire bits:             19
   Number of public wires:          11
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $eq                             1
     $mux                            3
     $or                             1

=== Exit_1 ===

   Number of wires:                 11
   Number of wire bits:             18
   Number of public wires:          10
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $eq                             1
     $mux                            2

=== Exit ===

   Number of wires:                 11
   Number of wire bits:             18
   Number of public wires:          10
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $eq                             1
     $mux                            2

=== Crit_1 ===

   Number of wires:                 13
   Number of wire bits:             20
   Number of public wires:          11
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            1
     $eq                             1
     $mux                            4

=== Crit ===

   Number of wires:                 13
   Number of wire bits:             20
   Number of public wires:          11
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            1
     $eq                             1
     $mux                            4

=== design hierarchy ===

   system                            1
     Crit                            1
     Crit_1                          1
     Exit                            1
     Exit_1                          1
     Idle                            1
     Idle_1                          1
     Init                            1
     Try                             1
     Try_1                           1

   Number of wires:                253
   Number of wire bits:            405
   Number of public wires:         216
   Number of public wire bits:     356
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $and                            4
     $anyinit                        5
     $anyseq                         1
     $assert                         1
     $assume                         2
     $eq                            14
     $ff                             1
     $initstate                      1
     $logic_and                      1
     $logic_not                      5
     $mux                           62
     $not                            2
     $or                             3

6. Executing SMT2 backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Creating SMT-LIBv2 representation of module Crit.
Creating SMT-LIBv2 representation of module Crit_1.
Creating SMT-LIBv2 representation of module Exit.
Creating SMT-LIBv2 representation of module Exit_1.
Creating SMT-LIBv2 representation of module Idle.
Creating SMT-LIBv2 representation of module Idle_1.
Creating SMT-LIBv2 representation of module Init.
Creating SMT-LIBv2 representation of module Try.
Creating SMT-LIBv2 representation of module Try_1.
Creating SMT-LIBv2 representation of module system.

End of script. Logfile hash: 050a9f82b3, CPU: user 0.01s system 0.00s, MEM: 11.56 MB peak
Yosys 0.26+53 (git sha1 8216b23fb, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 70% 2x write_smt2 (0 sec), 20% 2x read_ilang (0 sec), ...
